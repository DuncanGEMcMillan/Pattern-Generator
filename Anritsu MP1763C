# -*- coding: utf-8 -*-
"""
@author: duncan
"""
import serial


class OSC():
    def __init__(self, portname):
        self.serialport = serial.serial_for_url(portname, do_not_open=True)
        self.serialport.close()  # In case port is already open
        self.serialport.open()
        self.serialport.write("++addr 9\n".encode())
        self.successread = 0
        self.failread = 0
        
    def clockamplitude(self, clkamp):
        self.serialport.write("CAP " + format(clkamp)\n".encode()) # Set clock amplitude 0.25 to 2V
        
    def resolution(self, res):
        self.serialport.write("RES " + format(res)\n".encode()) # Set clock resolution 0 - kHz, 1 - MHz
        
    def frequency(self, frequency):
        self.serialport.write("FRQ " + format(frequency)\n".encode()) # Set PG frequency
        
    def logic(self, logic):
        self.serialport.write("LGC " + format(logic)\n".encode()) # Set Pattern Logic 0 - Positive, 1 - Negative
        
    def patternselection(self, patternselection):
        self.serialport.write("PTS " + format(patternselection)\n".encode()) # Set Pattern Selection Default is 3; 0 - Alternate, 1 - Data, 2 - Zero subst, 3 - PRBS
        
    def pattern(self, pattern):
        self.serialport.write("PTN " + format(pattern)\n".encode()) # Set Pattern 2 - 2^7-1, 3 - 2^9-1, 5 - 2^11-1, 6 - 2^15-1, 7 - 2^20-1, 8 - 2^23-1, 9 - 2^31-1
        
    def errorinsertion(self, error):
        self.serialport.write("EAD " + format(error)\n".encode()) # Set Error insertion default 0 is off
        
    def negoutputamp(self, databaroutput):
        self.serialport.write("DAP " + format(databaroutput)\n".encode()) # Set positive data voltage -0.25 to -2.0V
        
    def posoutputamp(self, dataoutput):
        self.serialport.write("NAP " + format(posdataoutput)\n".encode()) # Set negative data voltage 0.25 to 2.0V  
        
    def dataoutputoffset(self, dataoutputoffset):
        self.serialport.write("DOS " + format(dataoutputoffset)\n".encode()) # Set negative data voltage -2.0 to 2.0V 
        
    def dataoutputoffset(self, databaroutputoffset):
        self.serialport.write("NOS " + format(dataoutputoffset)\n".encode()) # Set negative data voltage -2.0 to 2.0V
